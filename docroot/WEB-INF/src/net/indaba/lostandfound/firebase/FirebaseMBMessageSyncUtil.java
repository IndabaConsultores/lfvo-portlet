package net.indaba.lostandfound.firebase;

import java.io.UnsupportedEncodingException;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;

import com.liferay.message.boards.kernel.model.MBMessage;
import com.liferay.message.boards.kernel.service.MBMessageLocalServiceUtil;
import com.liferay.portal.kernel.dao.orm.DynamicQuery;
import com.liferay.portal.kernel.dao.orm.DynamicQueryFactoryUtil;
import com.liferay.portal.kernel.dao.orm.PropertyFactoryUtil;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.log.Log;
import com.liferay.portal.kernel.log.LogFactoryUtil;
import com.liferay.portal.kernel.service.ClassNameLocalServiceUtil;
import com.liferay.util.portlet.PortletProps;

import net.indaba.lostandfound.model.Item;
import net.indaba.lostandfound.model.impl.ItemImpl;
import net.indaba.lostandfound.service.ItemLocalServiceUtil;
import net.thegreshams.firebase4j.error.FirebaseException;
import net.thegreshams.firebase4j.error.JacksonUtilityException;
import net.thegreshams.firebase4j.model.FirebaseResponse;
import net.thegreshams.firebase4j.service.Firebase;

/**
 * Firebase sync utility class. Considers objects as shared; uses the
 * autogenerated Firebase key
 * 
 * @author yzhan
 *
 */
public class FirebaseMBMessageSyncUtil {

	private static FirebaseMBMessageSyncUtil instance;
	
	private FirebaseItemSyncUtil itemUtil = FirebaseItemSyncUtil.getInstance();

	private String FB_URI = PortletProps.get("firebase.url") + "/messages";
	private String FB_Item_URI = PortletProps.get("firebase.url") + "/items";

	private FirebaseMBMessageSyncUtil() {
		super();
	}

	public static FirebaseMBMessageSyncUtil getInstance() {
		if (instance == null) {
			instance = new FirebaseMBMessageSyncUtil();
		}
		return instance;
	}

	public boolean isSyncEnabled() {
		String firebaseSyncEnabled = PortletProps.get("firebase.sync.enabled");
		return Boolean.parseBoolean(firebaseSyncEnabled);
	}

	public void add(MBMessage message)
			throws FirebaseException, UnsupportedEncodingException, JacksonUtilityException, PortalException {
		Firebase firebase = new Firebase(FB_URI);
		Map<String, Object> objectMap = toMap(message);
		Item item = ItemLocalServiceUtil.getItem(message.getClassPK());
		String fbItemKey = itemUtil.getFirebaseKey(item);
		objectMap.put("item", fbItemKey);
		FirebaseResponse response = firebase.post(objectMap);
		if (response.getCode() == 200) {
			_log.debug("Firebase create sucessful");
			String fbMessageKey = (String) response.getBody().get("name");
			setRelation(itemUtil.getItemPath(item) + "/" + fbItemKey, fbMessageKey, true);
		} else {
			_log.debug("Firebase create unsuccessful. Response code: " + response.getCode());
		}
	}

	private void setRelation(long itemId, String fbMessageKey, boolean add)
			throws FirebaseException, UnsupportedEncodingException, JacksonUtilityException, PortalException {
		Firebase firebase = new Firebase(FB_Item_URI);
		Item item = ItemLocalServiceUtil.getItem(itemId);
		String fbItemKey = itemUtil.getFirebaseKey(item);

		FirebaseResponse response;
		if (add) {
			Map<String, Object> messagesMap = new HashMap<String, Object>();
			messagesMap.put(fbMessageKey, true);
			response = firebase.patch(itemUtil.getItemPath(item) + "/" + fbItemKey + "/messages", messagesMap);
		} else {
			response = firebase.delete(itemUtil.getItemPath(item) + "/" + fbItemKey + "/messages/" + fbMessageKey);
		}
		if (response.getCode() == 200) {
			_log.debug("Firebase relation modified");
		} else {
			_log.debug("Firebase relation not modified");
		}
	}
	
	private void setRelation(String fbItemPath, String fbMessageKey, boolean add) 
			throws FirebaseException, UnsupportedEncodingException, JacksonUtilityException {
		Firebase firebase = new Firebase(FB_Item_URI);

		FirebaseResponse response;
		if (add) {
			Map<String, Object> messagesMap = new HashMap<String, Object>();
			messagesMap.put(fbMessageKey, true);
			response = firebase.patch(fbItemPath + "/messages", messagesMap);
		} else {
			response = firebase.delete(fbItemPath + "/messages/" + fbMessageKey);
		}
		if (response.getCode() == 200) {
			_log.debug("Firebase relation modified");
		} else {
			_log.debug("Firebase relation not modified");
		}
	}

	public void update(MBMessage message) throws FirebaseException, UnsupportedEncodingException, JacksonUtilityException {
		update(message, getFirebaseKey(message));
	}

	public void update(MBMessage message, String key)
			throws FirebaseException, UnsupportedEncodingException, JacksonUtilityException {
		Firebase firebase = new Firebase(FB_URI);
		Map<String, Object> map = toMap(message);
		FirebaseResponse response = firebase.patch("/" + key, map);
		if (response.getCode() == 200) {
			_log.debug("Firebase update sucessful");
		} else {
			_log.debug("Firebase update unsuccessful. Response code: " + response.getCode());
		}
	}

	public void addOrUpdate(MBMessage message)
			throws FirebaseException, JacksonUtilityException, UnsupportedEncodingException, PortalException {
		String key = getFirebaseKey(message);
		if (key != null) { /* Message exists already in Firebase: update */
			update(message, key);
		} else { /* Message does not exist in Firebase: create */
			add(message);
		}
	}

	public void delete(MBMessage message)
			throws FirebaseException, UnsupportedEncodingException, JacksonUtilityException, PortalException {
		Firebase firebase = new Firebase(FB_URI);

		String key = getFirebaseKey(message);
		FirebaseResponse response;
		if (key != null) {
			response = firebase.delete("/" + key);
			if (response.getCode() == 200) {
				_log.debug("Firebase delete sucessful");
				setRelation(message.getClassPK(), key, false);
			} else {
				_log.debug("Firebase delete unsuccessful. Response code: " + response.getCode());
			}
		} else {
			_log.debug("Could not find message with id " + message.getPrimaryKeyObj());
		}
	}

	private String getFirebaseKey(MBMessage message) throws FirebaseException, UnsupportedEncodingException {
		Firebase firebase = new Firebase(FB_URI);
		firebase.addQuery("orderBy", "\"id\"");
		firebase.addQuery("equalTo", String.valueOf(message.getPrimaryKey()));
		FirebaseResponse response = firebase.get();
		if (response.getCode() == 200) {
			Map<String, Object> responseMap = response.getBody();
			Object[] keys = responseMap.keySet().toArray();
			if (keys.length > 0) {
				return (String) keys[0];
			} else {
				return null;
			}
		} else {
			_log.debug("Firebase get key unsuccessfull. Response code: " + response.getCode());
		}
		return null;
	}

	private Map<String, Object> toMap(MBMessage message) {
		Map<String, Object> messageMap = new HashMap<String, Object>();
		messageMap.put("id", message.getMessageId());
		messageMap.put("createDate", message.getCreateDate());
		messageMap.put("modifiedDate", message.getModifiedDate());
		messageMap.put("companyId", message.getCompanyId());
		messageMap.put("groupId", message.getGroupId());
		messageMap.put("itemId", message.getClassPK());
		messageMap.put("subject", message.getSubject());
		messageMap.put("body", message.getBody());
		return messageMap;
	};

	private MBMessage parseMap(Map<String, Object> map) {
		MBMessage msg;
		Object o = map.get("id");
		if (o == null) {
			msg = MBMessageLocalServiceUtil.createMBMessage(0);
			msg.setNew(true);
		} else {
			msg = MBMessageLocalServiceUtil.createMBMessage(Long.valueOf(o.toString()));
			msg.setNew(false);
		}
		o = map.get("groupId");
		if (o != null) {
			msg.setGroupId(Long.valueOf(o.toString()));
		}
		o = map.get("companyId");
		if (o != null) {
			msg.setCompanyId(Long.valueOf(o.toString()));
		}
		o = map.get("itemId");
		if (o != null) {
			msg.setClassPK(Long.valueOf(o.toString()));
		}
		o = map.get("subject");
		if (o != null) {
			msg.setSubject(o.toString());
		}
		o = map.get("body");
		if (o != null) {
			msg.setBody(o.toString());
		}
		o = map.get("createDate");
		if (o != null) {
			msg.setCreateDate(new Date(Long.valueOf(o.toString())));
		}
		o = map.get("modifiedDate");
		if (o != null) {
			msg.setModifiedDate(new Date(Long.valueOf(o.toString())));
		}
		msg.setClassName(Item.class.getName());
		return msg;
	};
	
	private List<MBMessage> getLiferayMsgsAfter(long liferayTS) {
		/*
		 * Get Liferay office items that were added/updated after last update
		 * time
		 */
		long classNameId = ClassNameLocalServiceUtil.getClassNameId(Item.class);
		DynamicQuery query = DynamicQueryFactoryUtil.forClass(MBMessage.class)
				.add(PropertyFactoryUtil.forName("modifiedDate").gt(new Date(liferayTS)))
				.add(PropertyFactoryUtil.forName("classNameId").eq(classNameId))
				.add(PropertyFactoryUtil.forName("classPK").ne(new Long(0)));
		return MBMessageLocalServiceUtil.dynamicQuery(query);
	}

	private Map<String, MBMessage> getFirebaseMsgsAfter(long firebaseTS)
			throws FirebaseException, UnsupportedEncodingException {
		Map<String, MBMessage> messages = new LinkedHashMap<String, MBMessage>();

		Firebase firebase = new Firebase(FB_URI);
		firebase = new Firebase(FB_URI);
		firebase.addQuery("orderBy", "\"modifiedDate\"");
		firebase.addQuery("startAt", String.valueOf(firebaseTS));
		FirebaseResponse response = firebase.get();
		Map<String, Object> fbMsgs = response.getBody();
		Iterator<Entry<String, Object>> it = fbMsgs.entrySet().iterator();
		while (it.hasNext()) {
			Entry<String, Object> e = it.next();
			Map<String, Object> map = (Map<String, Object>) e.getValue();
			MBMessage message = parseMap(map);
			if (message.getMessageId() != 0) {
				messages.put(e.getKey(), message);
			} else {
				message.setNew(true);
				messages.put(e.getKey(), message);
			}
		}
		return messages;
	}

	public Map<MBMessage, String> getUnsyncedMsgsSince(long date) throws UnsupportedEncodingException, FirebaseException {
		Map<MBMessage, String> unsyncedMsgs = new HashMap<MBMessage, String>();

		/* Get Liferay items that were added/updated after last sync time */
		List<MBMessage> lrMsgList = getLiferayMsgsAfter(date);
		/* Get Firebase items that were added/updated after last sync time */
		Map<String, MBMessage> fbMsgs = getFirebaseMsgsAfter(date);

		Map<Long, MBMessage> lrMsgs = new HashMap<Long, MBMessage>();

		/* Convert list to map for easier access by itemId */
		for (MBMessage i : lrMsgList) {
			lrMsgs.put(i.getMessageId(), i);
		}
		/* Add fbItem in fbItemSet */
		MBMessage lrMsg, fbMsg;
		for (Entry<String, MBMessage> e : fbMsgs.entrySet()) {
			fbMsg = e.getValue();
			lrMsg = lrMsgs.get(fbMsg.getMessageId());
			if (lrMsg != null) {
				/* item exists in FB and LR; compare modified date */
				int dateComp = lrMsg.getModifiedDate().compareTo(fbMsg.getModifiedDate());
				if (dateComp == 0) {
					lrMsgs.remove(lrMsg.getMessageId());
				} else if (dateComp < 0) {
					unsyncedMsgs.put(fbMsg, e.getKey());
				}
			} else {
				unsyncedMsgs.put(fbMsg, e.getKey());
			}
		}
		for (Entry<Long, MBMessage> e : lrMsgs.entrySet()) {
			unsyncedMsgs.put(e.getValue(), "liferay");
		}
		
		return unsyncedMsgs;
	}


	private final Log _log = LogFactoryUtil.getLog(FirebaseMBMessageSyncUtil.class);

}
